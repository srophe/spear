name: Deploy to S3

on:
  push:
    branches:
      - 'main'

permissions:
  id-token: write
  contents: read

env:
  BUCKET_NAME: spear-front-end

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Full history for accurate diffs

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_SPEAR_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHub-OIDC-frontend-spear
          role-duration-seconds: 21600

      - name: Generate list of all changed files
        run: |
          git fetch origin main
          git diff --name-only origin/main..HEAD > changed_files.txt || true

      - name: Upload changed files in parallel to S3
        run: |
          MAX_PARALLEL=8

          if [ ! -f changed_files.txt ]; then
            echo "No changed_files.txt found. Skipping upload."
            exit 0
          fi

          total_files=$(grep -c '^' changed_files.txt)
          echo "Found $total_files changed file(s) to upload."

          if [ "$total_files" -eq 0 ]; then
            echo "No changed files to upload. Skipping."
            exit 0
          fi

          function wait_for_jobs() {
            local joblist=($(jobs -p))
            while [ ${#joblist[@]} -ge $MAX_PARALLEL ]; do
              sleep 1
              joblist=($(jobs -p))
            done
          }

          while read file; do
            if [ -f "$file" ]; then
              echo "Uploading $file to s3://$BUCKET_NAME/$file"
              (
                aws s3 cp "$file" "s3://$BUCKET_NAME/$file" \
                  --content-type "$(file --mime-type -b "$file")" \
                  --only-show-errors
              ) &
              wait_for_jobs
            else
              echo "File not found locally: $file"
            fi
          done < changed_files.txt

          wait
          echo "All uploads completed."
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

      - name: Invalidate CloudFront Cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.SPEAR_CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
